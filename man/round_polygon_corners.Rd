% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/round-polygon-corners.R
\name{round_polygon_corners}
\alias{round_polygon_corners}
\title{Rounds the corners of a polygon}
\usage{
round_polygon_corners(
  vertex.df,
  corner.radius = "constant",
  corner.radius.scale = 1,
  max.vertices.per.corner = 50
)
}
\arguments{
\item{vertex.df}{A data frame where each row corresponds to a vertex in the polygon.
It must contain the columns \code{x} and \code{y} where \code{x} and \code{y}
specify the coordinates of the vertex,}

\item{corner.radius}{Determines the corner radius of each circular art. Can be one
of the following:
\itemize{
  \item{A single value, which will be used for every circular arc/corner}
  \item{A numeric vector of length nrow(vertex.df), where each value specifies
  the corner radius used for the corresponding vertex}
  \item{"constant", where every corner uses the same, optimal radius. This is the
  largest possible radius while keeping things "nice and smooth"}
  \item{"varying", which computes the largest possible corner radius for each vertex}
}}

\item{corner.radius.scale}{A number that each corner radius is multiplied by.
Useful when \code{corner.radius} is "constant" or "varying", and you wish to
reduce the size of the corner radius values.}

\item{max.vertices.per.corner}{Controls the number of vertices used in the circular arcs
that replace the corners. This depends on how sharp the corner is: the sharper the
corner, the more vertices are needed to create a smooth arc.}
}
\value{
A data frame that contains the x- and y-coordinates of the rounded polygon.
}
\description{
Takes in a single polygon and rounds it by replacing the corner vertices with circular arcs.
}
\note{
If the corner radius values are specified manually, the results will not necessarily
look good, and it may take some trial and error. The option "varying" is experimental,
and can be bit aggressive. See the example for a comparison between the different
options.
}
\examples{
# Generate a random polygon based on polar coordinates
set.seed(321)
n = 20 # Number of vertices
theta = rev(seq(0, 2*pi, length.out=n)[-(n + 1)])
radius = runif(n, 10, 20)
vertex.df = data.frame(x = radius*cos(theta), y = radius*sin(theta))
#'
# Plot original polygon
library(ggplot2)
ggplot() + geom_polygon(data = vertex.df, aes(x = x, y = y))+coord_fixed()
#'
# Every corner is rounded with the same specified radius
rounded.1 = round_polygon_corners(vertex.df, corner.radius = 1)
ggplot() + geom_polygon(data = rounded.1, aes(x = x, y = y)) + coord_fixed()
#'
# The corners are rounded with individual, specified radius
rounded.2 = round_polygon_corners(vertex.df, corner.radius = runif(n, 0, 1.9))
ggplot() + geom_polygon(data = rounded.2, aes(x = x, y = y)) + coord_fixed()
#'
# Every corner is rounded with the same optimal radius
rounded.3 = round_polygon_corners(vertex.df, corner.radius = "constant")
ggplot() + geom_polygon(data = rounded.3, aes(x = x, y = y)) + coord_fixed()
#'
# The corners are rounded with optimal individual radius
rounded.4 = round_polygon_corners(vertex.df, corner.radius = "varying")
ggplot() + geom_polygon(data = rounded.4, aes(x = x, y = y)) + coord_fixed()

# Comparison of different options
ggplot()+
  geom_polygon(data = rounded.1, aes(x = x, y = y, fill = "1. Constant, manual"))+
  geom_polygon(data = rounded.2, aes(x = x + 40, y = y, fill = "2. Varying, manual"))+
  geom_polygon(data = rounded.3, aes(x = x, y = y - 40, fill = "3. Constant, optimal"))+
  geom_polygon(data = rounded.4, aes(x = x + 40, y = y - 40, fill = "4. Varying, optimal"))+
  coord_fixed()

# Below we what happens if the corner radius is too large:
# The circular arcs are not connected in a smooth way
rounded.5 = round_polygon_corners(vertex.df, corner.radius = 4)
ggplot() + geom_polygon(data = rounded.5, aes(x = x, y = y)) + coord_fixed()

}
\author{
Mathias Isaksen \email{mathiasleanderi@gmail.com}
}
