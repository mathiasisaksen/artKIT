// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cutEveryPolygonRcpp
Rcpp::DataFrame cutEveryPolygonRcpp(Rcpp::NumericVector x, Rcpp::NumericVector y, Rcpp::NumericVector group, int numberOfIterations, bool useCentroid);
RcppExport SEXP _artKIT_cutEveryPolygonRcpp(SEXP xSEXP, SEXP ySEXP, SEXP groupSEXP, SEXP numberOfIterationsSEXP, SEXP useCentroidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< int >::type numberOfIterations(numberOfIterationsSEXP);
    Rcpp::traits::input_parameter< bool >::type useCentroid(useCentroidSEXP);
    rcpp_result_gen = Rcpp::wrap(cutEveryPolygonRcpp(x, y, group, numberOfIterations, useCentroid));
    return rcpp_result_gen;
END_RCPP
}
// cutEveryPolygonReturnAllRcpp
Rcpp::DataFrame cutEveryPolygonReturnAllRcpp(Rcpp::NumericVector x, Rcpp::NumericVector y, Rcpp::NumericVector group, int numberOfIterations, bool useCentroid);
RcppExport SEXP _artKIT_cutEveryPolygonReturnAllRcpp(SEXP xSEXP, SEXP ySEXP, SEXP groupSEXP, SEXP numberOfIterationsSEXP, SEXP useCentroidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< int >::type numberOfIterations(numberOfIterationsSEXP);
    Rcpp::traits::input_parameter< bool >::type useCentroid(useCentroidSEXP);
    rcpp_result_gen = Rcpp::wrap(cutEveryPolygonReturnAllRcpp(x, y, group, numberOfIterations, useCentroid));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_artKIT_cutEveryPolygonRcpp", (DL_FUNC) &_artKIT_cutEveryPolygonRcpp, 5},
    {"_artKIT_cutEveryPolygonReturnAllRcpp", (DL_FUNC) &_artKIT_cutEveryPolygonReturnAllRcpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_artKIT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
